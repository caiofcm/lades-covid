{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/chart-wrapper/chart-wrapper.component.ts","webpack:///src/app/chart-wrapper/chart-wrapper.component.html","webpack:///src/app/chips-autocomplete/chips-autocomplete.component.ts","webpack:///src/app/chips-autocomplete/chips-autocomplete.component.html","webpack:///src/app/data/countries.ts","webpack:///src/app/main-app/main-app.component.ts","webpack:///src/app/main-app/main-app.component.html","webpack:///src/app/page-brazil/page-brazil.component.ts","webpack:///src/app/page-brazil/page-brazil.component.html","webpack:///src/app/pages/page-global/page-global.component.ts","webpack:///src/app/pages/page-global/page-global.component.html","webpack:///src/app/services/global-data.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","plotlyVersion","plotlyBundle","AppModule","declarations","providers","bootstrap","ChartWrapperComponent","graph","data","x","y","type","mode","marker","color","layout","width","height","ChipsAutocompleteComponent","visible","selectable","removable","separatorKeysCodes","fruitCtrl","countries","allCountries","onSelectionChange","filteredCountries","valueChanges","pipe","fruit","_filter","slice","event","input","value","trim","push","setValue","index","indexOf","splice","emit","option","viewValue","fruitInput","nativeElement","filterValue","toLowerCase","filter","add","selected","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BA","BW","BV","BR","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SK","SI","SB","SO","ZA","GS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","countriesReversed","countryNames","Object","map","k","MainAppComponent","breakpointObserver","isHandset$","observe","Handset","result","matches","PageBrazilComponent","iconBarSvg","name","svg","lineChartSvg","PageGlobalComponent","globalSvr","METRICS","v","n","typesCalc","metricCtrl","typeCtrl","normalizeInitialCtrl","isLine","graph$","countriesData$","values","length","console","log","timelinesContries","location","timelines","timeline","timelinesArrays","x_iter","normStart","normalizedStartCountries","caseCountry","filteredCumm","findIndex","error","i","timeLinesArraysAdjusted","arr","adjusttimeSeriesToCalcType","traces","countryMod","country","obj","modeBarButtons","icon","click","element","handleLineOrBar","plotlyConfigRef","displaylogo","scrollZoom","subscribe","metric","triggerCountriesDataSubject","array","typeCalc","prev","diff","countryCodes","getData","addCountryData","typeplt","nameplt","iconplt","forEach","trace","newModeBar","handleCountrySelection","urlGlobalBase","urlLocationCountries","GlobalDataService","http","countriesDataSubjst","asObservable","locationId","get","getUrlGlobal","handleError","countryCode","countrycode","requestContryLocationId","resp","locations","idLocation","requestLocationData","next","countriesData","observables","requestCountryData","getValue","val","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PageGlobalComponent } from './pages/page-global/page-global.component';\nimport { PageBrazilComponent } from './page-brazil/page-brazil.component';\n\n\nconst routes: Routes = [\n  {path: '', component: PageGlobalComponent},\n  {path: 'brazil', component: PageBrazilComponent},\n  {path: 'analyzes', component: PageBrazilComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Covid19 - LADES';\n}\n","<app-main-app>\n  <router-outlet></router-outlet>\n</app-main-app>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MainAppComponent } from './main-app/main-app.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from '@angular/material/input';\n\n// import * as PlotlyJS from 'plotly.js/dist/plotly.js';\n// import { PlotlyModule } from 'angular-plotly.js';\n// PlotlyModule.plotlyjs = PlotlyJS;\nimport { PlotlyViaCDNModule } from 'angular-plotly.js';\nPlotlyViaCDNModule.plotlyVersion = 'latest'; // can be `latest` or any version number (i.e.: '1.40.0')\nPlotlyViaCDNModule.plotlyBundle = 'basic'; // optional: can be null (for full) or 'basic', 'cartesian', 'geo',\n\nimport { ChartWrapperComponent } from './chart-wrapper/chart-wrapper.component';\nimport { PageGlobalComponent } from './pages/page-global/page-global.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ChipsAutocompleteComponent } from './chips-autocomplete/chips-autocomplete.component';\nimport { PageBrazilComponent } from './page-brazil/page-brazil.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainAppComponent,\n    ChartWrapperComponent,\n    PageGlobalComponent,\n    ChipsAutocompleteComponent,\n    PageBrazilComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatInputModule,\n    MatChipsModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatFormFieldModule,\n    PlotlyViaCDNModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"app-chart-wrapper\",\n  templateUrl: \"./chart-wrapper.component.html\",\n  styleUrls: [\"./chart-wrapper.component.scss\"],\n})\nexport class ChartWrapperComponent implements OnInit {\n  graph = {\n    data: [\n      {\n        x: [1, 2, 3],\n        y: [2, 6, 3],\n        type: \"scatter\",\n        mode: \"lines+points\",\n        marker: { color: \"red\" },\n      },\n      { x: [1, 2, 3], y: [2, 5, 3], type: \"bar\" },\n    ],\n    layout: { width: 320, height: 240, title: \"A Fancy Plot\" },\n  };\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<plotly-plot [data]=\"graph.data\" [layout]=\"graph.layout\"></plotly-plot>\n","import { COMMA, ENTER } from \"@angular/cdk/keycodes\";\nimport { Component, OnInit, ElementRef, ViewChild, Output, EventEmitter } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\nimport {\n  MatAutocompleteSelectedEvent,\n  MatAutocomplete,\n} from \"@angular/material/autocomplete\";\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { startWith, map } from 'rxjs/operators';\nimport {countryNames} from '../data/countries'\n\n@Component({\n  selector: \"app-chips-autocomplete\",\n  templateUrl: \"./chips-autocomplete.component.html\",\n  styleUrls: [\"./chips-autocomplete.component.scss\"],\n})\nexport class ChipsAutocompleteComponent implements OnInit {\n  visible = true;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  fruitCtrl = new FormControl();\n  filteredCountries: Observable<string[]>;\n  countries: string[] = [\"Brazil\", 'United States', 'Italy', 'Spain'];\n  allCountries: string[] = countryNames\n\n  @Output() onSelectionChange = new EventEmitter<string[]>()\n\n  @ViewChild(\"fruitInput\", { static: true }) fruitInput: ElementRef<\n    HTMLInputElement\n  >;\n  @ViewChild(\"auto\", { static: true }) matAutocomplete: MatAutocomplete;\n\n  constructor() {\n    this.filteredCountries = this.fruitCtrl.valueChanges.pipe(\n      startWith(null),\n      map((fruit: string | null) =>\n        fruit ? this._filter(fruit) : this.allCountries.slice()\n      )\n    );\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our fruit\n    if ((value || \"\").trim()) {\n      this.countries.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = \"\";\n    }\n\n    this.fruitCtrl.setValue(null);\n  }\n\n  remove(fruit: string): void {\n    const index = this.countries.indexOf(fruit);\n\n    if (index >= 0) {\n      this.countries.splice(index, 1);\n    }\n    this.onSelectionChange.emit(this.countries)\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    this.countries.push(event.option.viewValue);\n    this.fruitInput.nativeElement.value = \"\";\n    this.fruitCtrl.setValue(null);\n    this.onSelectionChange.emit(this.countries)\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allCountries.filter(\n      (fruit) => fruit.toLowerCase().indexOf(filterValue) === 0\n    );\n  }\n\n  ngOnInit(): void {\n    this.onSelectionChange.emit(this.countries)\n  }\n}\n","<mat-form-field class=\"example-chip-list\">\n  <mat-chip-list #chipList aria-label=\"Fruit selection\">\n    <mat-chip\n      *ngFor=\"let fruit of countries\"\n      [selectable]=\"selectable\"\n      [removable]=\"removable\"\n      (removed)=\"remove(fruit)\">\n      {{fruit}}\n      <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n    </mat-chip>\n    <input\n      placeholder=\"New country...\"\n      #fruitInput\n      [formControl]=\"fruitCtrl\"\n      [matAutocomplete]=\"auto\"\n      [matChipInputFor]=\"chipList\"\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n      (matChipInputTokenEnd)=\"add($event)\">\n  </mat-chip-list>\n  <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n    <mat-option *ngFor=\"let item of filteredCountries | async\" [value]=\"item\">\n      {{item}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n","export const countries = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei Darussalam',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos (Keeling) Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: 'Cote D\\'Ivoire',\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands (Malvinas)',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Holy See (Vatican City State)',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran, Islamic Republic Of',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: 'Lao People\\'s Democratic Republic',\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libyan Arab Jamahiriya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia, Federated States Of',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestinian Territory, Occupied',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russian Federation',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syrian Arab Republic',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe'\n}\n\nexport const countriesReversed = {\n  'Afghanistan': 'AF',\n  'Aland Islands': 'AX',\n  'Albania': 'AL',\n  'Algeria': 'DZ',\n  'American Samoa': 'AS',\n  'Andorra': 'AD',\n  'Angola': 'AO',\n  'Anguilla': 'AI',\n  'Antarctica': 'AQ',\n  'Antigua And Barbuda': 'AG',\n  'Argentina': 'AR',\n  'Armenia': 'AM',\n  'Aruba': 'AW',\n  'Australia': 'AU',\n  'Austria': 'AT',\n  'Azerbaijan': 'AZ',\n  'Bahamas': 'BS',\n  'Bahrain': 'BH',\n  'Bangladesh': 'BD',\n  'Barbados': 'BB',\n  'Belarus': 'BY',\n  'Belgium': 'BE',\n  'Belize': 'BZ',\n  'Benin': 'BJ',\n  'Bermuda': 'BM',\n  'Bhutan': 'BT',\n  'Bolivia': 'BO',\n  'Bosnia And Herzegovina': 'BA',\n  'Botswana': 'BW',\n  'Bouvet Island': 'BV',\n  'Brazil': 'BR',\n  'British Indian Ocean Territory': 'IO',\n  'Brunei Darussalam': 'BN',\n  'Bulgaria': 'BG',\n  'Burkina Faso': 'BF',\n  'Burundi': 'BI',\n  'Cambodia': 'KH',\n  'Cameroon': 'CM',\n  'Canada': 'CA',\n  'Cape Verde': 'CV',\n  'Cayman Islands': 'KY',\n  'Central African Republic': 'CF',\n  'Chad': 'TD',\n  'Chile': 'CL',\n  'China': 'CN',\n  'Christmas Island': 'CX',\n  'Cocos (Keeling) Islands': 'CC',\n  'Colombia': 'CO',\n  'Comoros': 'KM',\n  'Congo': 'CG',\n  'Congo, Democratic Republic': 'CD',\n  'Cook Islands': 'CK',\n  'Costa Rica': 'CR',\n  'Cote D\\'Ivoire': 'CI',\n  'Croatia': 'HR',\n  'Cuba': 'CU',\n  'Cyprus': 'CY',\n  'Czech Republic': 'CZ',\n  'Denmark': 'DK',\n  'Djibouti': 'DJ',\n  'Dominica': 'DM',\n  'Dominican Republic': 'DO',\n  'Ecuador': 'EC',\n  'Egypt': 'EG',\n  'El Salvador': 'SV',\n  'Equatorial Guinea': 'GQ',\n  'Eritrea': 'ER',\n  'Estonia': 'EE',\n  'Ethiopia': 'ET',\n  'Falkland Islands (Malvinas)': 'FK',\n  'Faroe Islands': 'FO',\n  'Fiji': 'FJ',\n  'Finland': 'FI',\n  'France': 'FR',\n  'French Guiana': 'GF',\n  'French Polynesia': 'PF',\n  'French Southern Territories': 'TF',\n  'Gabon': 'GA',\n  'Gambia': 'GM',\n  'Georgia': 'GE',\n  'Germany': 'DE',\n  'Ghana': 'GH',\n  'Gibraltar': 'GI',\n  'Greece': 'GR',\n  'Greenland': 'GL',\n  'Grenada': 'GD',\n  'Guadeloupe': 'GP',\n  'Guam': 'GU',\n  'Guatemala': 'GT',\n  'Guernsey': 'GG',\n  'Guinea': 'GN',\n  'Guinea-Bissau': 'GW',\n  'Guyana': 'GY',\n  'Haiti': 'HT',\n  'Heard Island & Mcdonald Islands': 'HM',\n  'Holy See (Vatican City State)': 'VA',\n  'Honduras': 'HN',\n  'Hong Kong': 'HK',\n  'Hungary': 'HU',\n  'Iceland': 'IS',\n  'India': 'IN',\n  'Indonesia': 'ID',\n  'Iran, Islamic Republic Of': 'IR',\n  'Iraq': 'IQ',\n  'Ireland': 'IE',\n  'Isle Of Man': 'IM',\n  'Israel': 'IL',\n  'Italy': 'IT',\n  'Jamaica': 'JM',\n  'Japan': 'JP',\n  'Jersey': 'JE',\n  'Jordan': 'JO',\n  'Kazakhstan': 'KZ',\n  'Kenya': 'KE',\n  'Kiribati': 'KI',\n  'Korea': 'KR',\n  'Kuwait': 'KW',\n  'Kyrgyzstan': 'KG',\n  'Lao People\\'s Democratic Republic': 'LA',\n  'Latvia': 'LV',\n  'Lebanon': 'LB',\n  'Lesotho': 'LS',\n  'Liberia': 'LR',\n  'Libyan Arab Jamahiriya': 'LY',\n  'Liechtenstein': 'LI',\n  'Lithuania': 'LT',\n  'Luxembourg': 'LU',\n  'Macao': 'MO',\n  'Macedonia': 'MK',\n  'Madagascar': 'MG',\n  'Malawi': 'MW',\n  'Malaysia': 'MY',\n  'Maldives': 'MV',\n  'Mali': 'ML',\n  'Malta': 'MT',\n  'Marshall Islands': 'MH',\n  'Martinique': 'MQ',\n  'Mauritania': 'MR',\n  'Mauritius': 'MU',\n  'Mayotte': 'YT',\n  'Mexico': 'MX',\n  'Micronesia, Federated States Of': 'FM',\n  'Moldova': 'MD',\n  'Monaco': 'MC',\n  'Mongolia': 'MN',\n  'Montenegro': 'ME',\n  'Montserrat': 'MS',\n  'Morocco': 'MA',\n  'Mozambique': 'MZ',\n  'Myanmar': 'MM',\n  'Namibia': 'NA',\n  'Nauru': 'NR',\n  'Nepal': 'NP',\n  'Netherlands': 'NL',\n  'Netherlands Antilles': 'AN',\n  'New Caledonia': 'NC',\n  'New Zealand': 'NZ',\n  'Nicaragua': 'NI',\n  'Niger': 'NE',\n  'Nigeria': 'NG',\n  'Niue': 'NU',\n  'Norfolk Island': 'NF',\n  'Northern Mariana Islands': 'MP',\n  'Norway': 'NO',\n  'Oman': 'OM',\n  'Pakistan': 'PK',\n  'Palau': 'PW',\n  'Palestinian Territory, Occupied': 'PS',\n  'Panama': 'PA',\n  'Papua New Guinea': 'PG',\n  'Paraguay': 'PY',\n  'Peru': 'PE',\n  'Philippines': 'PH',\n  'Pitcairn': 'PN',\n  'Poland': 'PL',\n  'Portugal': 'PT',\n  'Puerto Rico': 'PR',\n  'Qatar': 'QA',\n  'Reunion': 'RE',\n  'Romania': 'RO',\n  'Russian Federation': 'RU',\n  'Rwanda': 'RW',\n  'Saint Barthelemy': 'BL',\n  'Saint Helena': 'SH',\n  'Saint Kitts And Nevis': 'KN',\n  'Saint Lucia': 'LC',\n  'Saint Martin': 'MF',\n  'Saint Pierre And Miquelon': 'PM',\n  'Saint Vincent And Grenadines': 'VC',\n  'Samoa': 'WS',\n  'San Marino': 'SM',\n  'Sao Tome And Principe': 'ST',\n  'Saudi Arabia': 'SA',\n  'Senegal': 'SN',\n  'Serbia': 'RS',\n  'Seychelles': 'SC',\n  'Sierra Leone': 'SL',\n  'Singapore': 'SG',\n  'Slovakia': 'SK',\n  'Slovenia': 'SI',\n  'Solomon Islands': 'SB',\n  'Somalia': 'SO',\n  'South Africa': 'ZA',\n  'South Georgia And Sandwich Isl.': 'GS',\n  'Spain': 'ES',\n  'Sri Lanka': 'LK',\n  'Sudan': 'SD',\n  'Suriname': 'SR',\n  'Svalbard And Jan Mayen': 'SJ',\n  'Swaziland': 'SZ',\n  'Sweden': 'SE',\n  'Switzerland': 'CH',\n  'Syrian Arab Republic': 'SY',\n  'Taiwan': 'TW',\n  'Tajikistan': 'TJ',\n  'Tanzania': 'TZ',\n  'Thailand': 'TH',\n  'Timor-Leste': 'TL',\n  'Togo': 'TG',\n  'Tokelau': 'TK',\n  'Tonga': 'TO',\n  'Trinidad And Tobago': 'TT',\n  'Tunisia': 'TN',\n  'Turkey': 'TR',\n  'Turkmenistan': 'TM',\n  'Turks And Caicos Islands': 'TC',\n  'Tuvalu': 'TV',\n  'Uganda': 'UG',\n  'Ukraine': 'UA',\n  'United Arab Emirates': 'AE',\n  'United Kingdom': 'GB',\n  'United States': 'US',\n  'United States Outlying Islands': 'UM',\n  'Uruguay': 'UY',\n  'Uzbekistan': 'UZ',\n  'Vanuatu': 'VU',\n  'Venezuela': 'VE',\n  'Viet Nam': 'VN',\n  'Virgin Islands, British': 'VG',\n  'Virgin Islands, U.S.': 'VI',\n  'Wallis And Futuna': 'WF',\n  'Western Sahara': 'EH',\n  'Yemen': 'YE',\n  'Zambia': 'ZM',\n  'Zimbabwe': 'ZW',\n}\nexport const countryNames = Object.keys(countries).map(k => countries[k])\n// export const countryNames = Object.keys(countries).map(k => countries[k])\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-main-app',\n  templateUrl: './main-app.component.html',\n  styleUrls: ['./main-app.component.scss']\n})\nexport class MainAppComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"(isHandset$ | async) === false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <a mat-list-item routerLink=\"\">Global</a>\n      <a mat-list-item routerLink=\"brazil\">Brazil</a>\n      <a mat-list-item routerLink=\"analyzes\">Analyzes</a>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\" style=\"display: flex; justify-content: space-between;\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>Covid19 Dashboard - LADES Research Group</span>\n      <span>\n        <img src=\"./assets/cropped-Marcas_Lades.png\" alt=\"\" srcset=\"\" style=\"width: 100px; background-color: white;\">\n      </span>\n    </mat-toolbar>\n    <router-outlet></router-outlet>\n    <!-- Add Content Here -->\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-brazil',\n  templateUrl: './page-brazil.component.html',\n  styleUrls: ['./page-brazil.component.scss']\n})\nexport class PageBrazilComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>Under development</p>\n","import { Component, OnInit } from \"@angular/core\";\nimport { GlobalDataService } from \"src/app/services/global-data.service\";\nimport { map, filter, startWith, debounceTime } from \"rxjs/operators\";\nimport { countriesReversed } from \"src/app/data/countries\";\nimport { FormControl } from \"@angular/forms\";\n\nconst iconBarSvg = {\n  width: 1000,\n  height: 1000,\n  name: \"newplotlylogo\",\n  svg:\n    '<svg enable-background=\"new 0 0 50 50\" height=\"50px\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 50 50\" width=\"50px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><rect fill=\"none\" height=\"31\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" width=\"12\" x=\"3\" y=\"18\"/><rect fill=\"none\" height=\"20\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" width=\"12\" x=\"19\" y=\"29\"/><rect fill=\"none\" height=\"44\" stroke=\"#000000\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" width=\"12\" x=\"35\" y=\"5\"/><rect fill=\"none\" height=\"50\" width=\"50\"/></svg>',\n};\n\nconst lineChartSvg = {\n  width: 1000,\n  height: 1000,\n  name: \"newplotlylogo\",\n  svg:\n    '<svg enable-background=\"new 0 0 50 50\" height=\"50px\" id=\"Layer_1\" version=\"1.1\" viewBox=\"0 0 50 50\" width=\"50px\" xml:space=\"preserve\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><rect fill=\"none\" height=\"50\" width=\"50\"/><circle cx=\"2\" cy=\"25\" r=\"2\"/><circle cx=\"15\" cy=\"19\" r=\"2\"/><circle cx=\"25\" cy=\"11\" r=\"2\"/><circle cx=\"35\" cy=\"17\" r=\"2\"/><circle cx=\"48\" cy=\"5\" r=\"2\"/><circle cx=\"2\" cy=\"39\" r=\"2\"/><circle cx=\"15\" cy=\"41\" r=\"2\"/><circle cx=\"25\" cy=\"33\" r=\"2\"/><circle cx=\"35\" cy=\"43\" r=\"2\"/><circle cx=\"48\" cy=\"31\" r=\"2\"/><polyline fill=\"none\" points=\"2,25 15,19 25,11   35,17 48,5 \" stroke=\"#000000\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\"/><polyline fill=\"none\" points=\"2,39 15,41 25,33   35,43 48,31 \" stroke=\"#000000\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\"/></svg>',\n};\n\n@Component({\n  selector: \"app-page-global\",\n  templateUrl: \"./page-global.component.html\",\n  styleUrls: [\"./page-global.component.scss\"],\n})\nexport class PageGlobalComponent implements OnInit {\n  METRICS = [\n    { v: \"confirmed\", n: \"Confirmed\" },\n    { v: \"deaths\", n: \"Deaths\" },\n    // { v: \"recovered\", n: \"Recovered\" },\n  ];\n\n  typesCalc = [\n    { v: \"cummulative\", n: \"Cummulative\" },\n    { v: \"daily\", n: \"Daily\" },\n    // { v: \"recovered\", n: \"Recovered\" },\n  ];\n\n  // selectedMetric: string\n  metricCtrl = new FormControl(\"confirmed\");\n  typeCtrl = new FormControl(\"cummulative\");\n  normalizeInitialCtrl = new FormControl(0);\n  countryCodes: string[];\n  isLine = true;\n\n  constructor(public globalSvr: GlobalDataService) {\n    this.metricCtrl.valueChanges\n      .pipe(filter((v) => !!v))\n      .subscribe((metric) => {\n        console.log(\"metric changed\");\n        this.globalSvr.triggerCountriesDataSubject();\n      });\n\n    this.typeCtrl.valueChanges.pipe(filter((v) => !!v)).subscribe((type) => {\n      console.log(\"type changed\");\n      if (type != 'cummulative')\n        this.isLine = false\n      this.handleLineOrBar();\n    });\n\n    this.normalizeInitialCtrl.valueChanges.pipe(\n      debounceTime(250)\n    ).subscribe((type) => {\n      console.log(\"normalizeInitialCtrl changed\");\n      this.globalSvr.triggerCountriesDataSubject();\n    });\n  }\n\n  graph$ = this.globalSvr.countriesData$.pipe(\n    filter((values) => !!values.length),\n    map((values) => {\n      console.log('IN GRAPH PIPE');\n      const timelinesContries = values.map(\n        (value) => value.location.timelines[this.metricCtrl.value].timeline\n      );\n      const timelinesArrays: any[] = timelinesContries.map((timeline) => {\n        const x = Object.keys(timeline);\n        const y = x.map((x_iter) => timeline[x_iter]);\n        return { x, y };\n      });\n      const normStart = this.normalizeInitialCtrl.value\n      let normalizedStartCountries = timelinesArrays\n      if (normStart > 0) {\n        normalizedStartCountries = timelinesArrays.map(caseCountry => {\n        let filteredCumm = 0\n        try {\n          filteredCumm = caseCountry.y.findIndex(y => y > normStart)\n        } catch (error) {\n          console.log('Error in normalization starting value');\n        }\n          return {\n            x: caseCountry.x.slice(filteredCumm).map((v,i) => i),\n            y: caseCountry.y.slice(filteredCumm)\n          }\n        })\n      }\n      const timeLinesArraysAdjusted = normalizedStartCountries.map((arr) =>\n        this.adjusttimeSeriesToCalcType(arr)\n      );\n      const traces = timeLinesArraysAdjusted.map((countryMod, i) => {\n        return {\n          x: countryMod.x,\n          y: countryMod.y,\n          type: \"scatter\",\n          mode: \"lines+markers\",\n          // marker: { color: \"red\" },\n          name: values[i].location.country,\n        };\n      });\n      const obj = {\n        layout: {\n          // width: '100%',\n          // height: 640,\n          title: `Metric: ${this.metricCtrl.value} cases`,\n        },\n        data: traces,\n      };\n      return obj;\n    })\n  );\n\n  adjusttimeSeriesToCalcType(array: { x: string[] | number[]; y: number[] }) {\n    const typeCalc = this.typeCtrl.value;\n    if (typeCalc == \"cummulative\") return array;\n    else if (typeCalc == \"daily\") {\n      const prev = array.y.slice(0, array.y.length - 1);\n      const diff = array.y.slice(1).map((v, i) => v - prev[i]);\n      return { ...array, y: diff };\n    }\n  }\n\n  ngOnInit(): void {\n    // const codes = [\"US\", \"BR\"];\n    // var requestOptions = <RequestInit>{\n    //   method: 'GET',\n    //   redirect: 'follow'\n    // };\n    // fetch(\"https://thevirustracker.com/free-api?countryTimeline=US\", requestOptions)\n    //   .then(response => response.text())\n    //   .then(result => console.log(result))\n    //   .catch(error => console.log('error', error));\n    // this.globalSvr.addCountryData(codes);\n  }\n\n  handleCountrySelection(countryNames: string[]) {\n    this.countryCodes = countryNames.map((v) => countriesReversed[v]);\n    this.getData();\n  }\n\n  getData() {\n    // return\n    this.globalSvr.addCountryData({\n      countryCodes: this.countryCodes,\n      metric: this.metricCtrl.value,\n    });\n  }\n\n\n  handleLineOrBar() {\n    const typeplt = this.isLine ? \"scatter\" : \"bar\";\n    const nameplt = !this.isLine ? \"Lines\" : \"Bars\";\n    const iconplt = !this.isLine ? lineChartSvg : iconBarSvg;\n    this.graph$ = this.graph$.pipe(\n      map((graph) => {\n        graph.data.forEach((trace) => {\n          trace.type = typeplt;\n        });\n        return graph;\n      })\n    );\n    const newModeBar = [\n      [\n        {\n          name: `Show as ${nameplt}`,\n          icon: iconplt,\n          click: (element) => {\n            this.handleLineOrBar();\n          },\n        },\n      ],\n      [\"toImage\"],\n      [\"pan2d\"],\n      [\"select2d\"],\n      [\"zoomIn2d\"],\n      [\"zoomOut2d\"],\n      [\"autoScale2d\"],\n      [\"resetScale2d\"],\n    ];\n    this.plotlyConfigRef.modeBarButtons = newModeBar;\n    this.isLine = !this.isLine;\n  }\n\n  modeBarButtons = [\n    [\n      {\n        name: \"Show as Bars\",\n        icon: iconBarSvg,\n        click: (element) => {\n          this.handleLineOrBar();\n        },\n      },\n    ],\n    [\"toImage\"],\n    [\"pan2d\"],\n    [\"select2d\"],\n    [\"zoomIn2d\"],\n    [\"zoomOut2d\"],\n    [\"autoScale2d\"],\n    [\"resetScale2d\"],\n  ];\n\n  plotlyConfigRef = {\n    displaylogo: false,\n    scrollZoom: false,\n    //https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\n    modeBarButtons: this.modeBarButtons,\n  };\n}\n","<div style=\"margin: 10px; display: flex; flex-direction: column;\">\n\n  <div style=\"display: flex; justify-content: space-evenly;\">\n    <mat-form-field style=\"flex-basis: 33%;\">\n      <mat-label>Metric</mat-label>\n      <mat-select\n        [formControl]=\"metricCtrl\">\n        <mat-option *ngFor=\"let metric of METRICS\" [value]=\"metric.v\">\n          {{metric.n}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field style=\"flex-basis: 33%;\">\n      <mat-label>Type</mat-label>\n      <mat-select\n        [formControl]=\"typeCtrl\">\n        <mat-option *ngFor=\"let type of typesCalc\" [value]=\"type.v\">\n          {{type.n}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field style=\"flex-basis: 33%;\">\n      <mat-label>Normalize to initial case number</mat-label>\n      <input [formControl]=\"normalizeInitialCtrl\" matInput placeholder=\"Normalize to initial case number\" value=\"0\" type=\"number\">\n    </mat-form-field>\n  </div>\n\n  <app-chips-autocomplete (onSelectionChange)=\"handleCountrySelection($event)\">\n  </app-chips-autocomplete>\n\n\n\n  <div *ngIf=\"(graph$ | async) as graph\" style=\"width: 100%;\">\n    <plotly-plot [data]=\"graph.data\" [layout]=\"graph.layout\" [useResizeHandler]=\"true\"\n      [style]=\"{position: 'relative', width: '100%', height: '100%'}\"\n      [config]=\"plotlyConfigRef\">\n    </plotly-plot>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { retry, catchError, tap, switchMap, map } from \"rxjs/operators\";\nimport { ObservableInput, BehaviorSubject, forkJoin } from \"rxjs\";\n\n// const urlGlobalBase = \"https://thevirustracker.com/free-api?countryTimeline=\";\nconst urlGlobalBase = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations/\"\nconst urlLocationCountries = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations\"\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class GlobalDataService {\n  constructor(private http: HttpClient) {}\n\n  // requestCountryData(countryCode: string) {\n  requestLocationData(locationId: number) {\n    return this.http\n      .get<any>(this.getUrlGlobal(locationId))\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      )\n  }\n\n  requestContryLocationId(countryCode: string) {\n    return this.http\n      .get<any>(`${urlLocationCountries}?country_code=${countryCode}`)\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      )\n  }\n\n  requestCountryData(countrycode: string) {\n    return this.requestContryLocationId(countrycode).pipe(\n      map(resp => {\n        console.log('switched');\n        return resp.locations[0].id\n      }),\n      switchMap((idLocation: any) => {\n        return this.requestLocationData(idLocation)\n      })\n    )\n  }\n\n  // getUrlGlobal(countryCode: string) {\n    getUrlGlobal(countryCode: number) {\n    return `${urlGlobalBase}${countryCode}`;\n    // return `${urlGlobalBase}`;\n  }\n\n  handleError(error: any): ObservableInput<any> {\n    console.log(\"error\");\n    return;\n  }\n\n  // Store\n  private readonly countriesDataSubjst = new BehaviorSubject<any[]>([]);\n  readonly countriesData$ = this.countriesDataSubjst.asObservable();\n\n  private get countriesData(): any[] {\n    return this.countriesDataSubjst.getValue();\n  }\n\n  private set countriesData(val: any[]) {\n    this.countriesDataSubjst.next(val);\n  }\n\n  public triggerCountriesDataSubject() {\n    this.countriesDataSubjst.next(this.countriesData)\n  }\n\n\n  /*\n  Obs: metric is not being used here... it provides all the data\n  */\n  addCountryData({countryCodes, metric}: {countryCodes: string[], metric: string}) {\n    // const codes = [39, 40]\n    const observables = countryCodes.map((code) =>\n      this.requestCountryData(code)\n    );\n\n    forkJoin(observables)\n      .pipe(\n        tap((array) => {\n          this.countriesData = array;\n        })\n      )\n      .subscribe((resp) => {\n        console.log(\"resp!\");\n      });\n    // const newCountryData\n    // this.countriesData = [\n    //   ...this.countriesData,\n    //   newCountryData\n    // ]\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}